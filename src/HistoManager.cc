//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file analysis/AnaEx02/src/HistoManager.cc
/// \brief Implementation of the HistoManager class
//
// $Id: HistoManager.cc 98060 2016-07-01 16:24:08Z gcosmo $
// GEANT4 tag $Name: geant4-09-04 $
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

// #include <TH1D.h>
// #include <TFile.h>
// #include <TTree.h>
// #include <TMath.h>
#include <CLHEP/Units/SystemOfUnits.h>
#include "G4SystemOfUnits.hh"
#include "G4PhysicalConstants.hh"

#include "HistoManager.hh"
#include "G4UnitsTable.hh"
#include "EventAction.hh"
#include "RunAction.hh"
#include "SteppingAction.hh"
#include "DetectorConstruction.hh"

#include "G4Run.hh"
#include "G4RunManager.hh"
#include "G4Event.hh"
#include "G4Step.hh"
#include "G4Track.hh"
#include "G4ProcessManager.hh"

#include "SteppingVerbose.hh"
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::HistoManager(DetectorConstruction *det)
    : fFactoryOn(false),
      fPrintModulo(100000),
      fDetector(det)
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::~HistoManager()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::BeginOfRunAction(const G4Run *aRun)
{
  G4cout << "### Run " << aRun->GetRunID() << " start." << G4endl;
  Book();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::EndOfRunAction(const G4Run *aRun)
{
  G4int NbOfEvents = aRun->GetNumberOfEvent();
  if (NbOfEvents == 0)
    return;
  Save();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::BeginOfEventAction(const G4Event *evt)
{
  G4int evtNb = evt->GetEventID();
  if (evtNb % fPrintModulo == 0)
    G4cout << "\n---> Begin of event: " << evtNb << G4endl;

  // initialisation per event
  fNumOfComptAtGe = 0;//在Ge中发生的康普顿次数
  fNumOfBremGamma = 0;
  fNumOfe = 0;
  fAngle = 0.;     //经过Ge之后gamma的散射角度
  fComptEnergy = 0.;
  fBremDepEnergy = 0.;
  ftmp = 0;
  fCompteTrackID = 0;
  fBremGammaTrackID = 0;
  fCompteTrackIDVec.clear();

  // G4cout << "----------A new Event!----------" << std::endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::EndOfEventAction(const G4Event *)
{
  // fill tuple
  FillTuple();
  //ShowCompteTrackStatus(fCompteTrackIDVec);
  //
  /*
  G4cout << "# of e- generated in a event is " << fNumOfe << std::endl;
  G4cout << "# of e- generated by Compton in a event is " <<
    ftmp << std::endl;
  G4cout << "----------The end of an Event----------" << std::endl;
  */
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::RecordStep(const G4Step *aStep)
{

  // get volume of the current step
  //
  fVolume = aStep->GetPreStepPoint()->GetTouchableHandle()->GetVolume();
  fPostVolume = aStep->GetPostStepPoint()->GetTouchableHandle()->GetVolume();

  //粒子在这步结束的动能
  fPostKEnergy = aStep->GetPostStepPoint()->GetKineticEnergy() / keV;

  //在这一步的过程的反应
  fProcess = aStep->GetPostStepPoint()
    ->GetProcessDefinedStep()->GetProcessName();

  //获得沉积下来的能量
  ftmpEnergy =
    aStep->GetTotalEnergyDeposit() / keV;

  // Get Track
  //
  aTrack = aStep->GetTrack();

  fTrackID = aTrack->GetTrackID();
  fParentID = aTrack->GetParentID();
  //这几行说了track是啥东西，从那来，叫什么轨迹
  fParticle = aTrack->GetDefinition()->GetParticleName();
  fpostMomentum = aStep->GetPostStepPoint()->GetMomentum();

  //考虑Ge探测器中的问题
  //1、所有step在Ge中的所有沉积能量 一个粒子跑完产生的沉积能量
  // if (volume == fDetector->GetFirstDetector())
  // {
  //   //Ge内所有沉积能量(包含退激发gamma)
  //   fGeEnergy += tmpEnergy;
  // }



  //Record compton energy and times of compt scattring.
  RecordComptEnergy();
  RecordGammaFinalAngle();


  // Cross check the electron number. If it's a different ele, count!.
  if (fParentID == 1 and fParticle == "e-" and fCompteTrackID != fTrackID){
    auto fCreatorProcess = aTrack->GetCreatorProcess()->GetProcessName();
    // G4cout << "This ele is created by: " << fCreatorProcess << std::endl;
    if (fCreatorProcess == "compt"){
      // G4cout << "Find a Compton e-!" << std::endl;
      fCompteTrackID = fTrackID;
      fCompteTrackIDVec.push_back(fTrackID);
      // ftmp++; // record the first order e- particle.
    }
  }

  if (fParticle == "gamma"
      and fTrackID != 1
      and fTrackID != fBremGammaTrackID){

    for (size_t i = 0;
         i < fCompteTrackIDVec.size();
         ++i){
      auto fCreatorProcess = aTrack->GetCreatorProcess()->GetProcessName();
      if (fParentID == fCompteTrackIDVec.at(i) and
          fCreatorProcess == "eBrem"){
        //G4cout << "find eBrem gamma." << std::endl;
        // Which means it's a Compton ele's secondary particles.
        fBremGammaTrackID = fTrackID;
        fNumOfBremGamma++;
        //fBremGammaEnergy += aTrack->GetTotalEnergy() / keV;
        fBremGammaEnergy = ftmpEnergy / keV;
        //G4cout << fBremGammaEnergy << std::endl;
        /*
        G4cout << "--------------BremStatus--------------" << std::endl;
        G4cout << "Brem gamma's ParentID is :" << fParentID << std::endl;
        G4cout << "The energy of brem Gamma is : " << fBremGammaEnergy
               << std::endl;
        G4cout << "----------TheEndOfBremStatus----------" << std::endl;
        */
      }
    }
  }

  if (fProcess == "eBrem"){
    fBremDepEnergy += ftmpEnergy / keV;
      // std::cout << "find Bremsstrahung!" << std::endl;

  }

  if (fTrackID == 1 and fParentID == 0
      and aStep->IsFirstStepInVolume()
      and fVolume == fDetector->GetGeDetector()){
    // G4cout << "Gamma initial energy is: "
    //    << aTrack->GetTotalEnergy() / keV << std::endl;
  }

}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::RecordComptEnergy(){
  if (fVolume == fDetector->GetGeDetector())
  {
    fNumOfComptAtGe++;
    fComptEnergy += ftmpEnergy;
    /*
      // Method faild.
    auto subParticles = aStep->GetSecondaryInCurrentStep();
    for(size_t i=0;i<subParticles->size();++i){
      auto subParticle = subParticles->at(i)->GetDefinition()->GetParticleName();
      if (subParticle == "e-"){
        fcompteTrackID = subParticles->at(i)->GetTrackID();
        G4cout << "compton ele's ID is: " << fcompteTrackID << std::endl;
      }
    }
    */
    //G4cout << "# of Compton = " << fNumOfComptAtGe << std::endl;
  }
  return;
}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::RecordGammaFinalAngle(){
  //在离开Ge时获取散射角度
  if (fVolume == fDetector->GetGeDetector()
      and fPostVolume == fDetector->GetphysiWorld()
      and fTrackID == 1 and fParentID == 0)
  {

    postX = fpostMomentum.x();
    postY = fpostMomentum.y();
    postZ = fpostMomentum.z();

    auto up = preX * postX + preY * postY + preZ * postZ;
    auto down = sqrt(preX * preX + preY * preY + preZ * preZ) *
      sqrt(postX * postX + postY * postY + postZ * postZ);

    fAngle = acos(up / down) * 180 / TMath::Pi();
    fGammaFinalEnergy = fPostKEnergy;
    //不考虑角度单多次离开Ge的动能//compton散射后粒子的能量
    //G4cout << "Gamma leaving angle is: " << fAngle << std::endl;
  }
  return;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::ShowProcessGenerateEle(const G4Step *aStep){
  // This Func show primary photon generate electron.
  if (fParentID == 0 && fTrackID == 1){
    auto iter = aStep->GetSecondaryInCurrentStep();
    for(size_t sub=0;sub<iter->size();sub++){
      auto subparticle=(*iter)[sub]->GetDefinition()->GetParticleName();
      if(subparticle=="e-"){
        //feBremEnergy += tmpEnergy / keV;
        fNumOfe++;
        G4cout << "A process generate an e-: " << fProcess << std::endl;
        G4cout << "Now the number of e- is: " << fNumOfe << std::endl;
      }
    }
  }
  return;
}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::ShowCompteTrackStatus(std::vector<G4int> aVec){
  G4cout << "--------------CompteStatus----------------" << std::endl;
  G4cout << "# of Compt e- is: " << (int)aVec.size() << std::endl;
  G4cout << "Whose TrackID is(are) the following: " << std::endl;
  for(std::vector<G4int>::iterator it = aVec.begin();
      it != aVec.end();
      it++){
    G4cout << *it << std::endl;
  }
  G4cout<< "-----------TheEndOfCompteStatus------------" << std::endl;
  return;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::Book()
{
  // Creating a tree container to handle histograms and ntuples.
  // This tree is associated to an output file.
  //
  auto analysisManager = G4AnalysisManager ::Instance();
  analysisManager->SetVerboseLevel(1);
  analysisManager->SetNtupleMerging(true);

  G4String fileName = "AnaEx02";
  G4bool fRootFile = analysisManager->OpenFile(fileName);
  // fRootFile = new TFile(fileName, "RECREATE");
  if (!fRootFile)
  {
    G4cout << " HistoManager::Book :"
           << " problem creating the ROOT TFile "
           << G4endl;
    return;
  }
  fFactoryOn = true;

  analysisManager->CreateNtuple("Compton", "Compton info");
  analysisManager->CreateNtupleDColumn(0, "TotalDepEnergy");
  analysisManager->CreateNtupleDColumn(0, "gammaFinalAngle");
  analysisManager->CreateNtupleIColumn(0, "numOfComptAtGe");
  analysisManager->CreateNtupleDColumn(0, "gammaFinalEnergy");
  analysisManager->FinishNtuple(0);

  analysisManager->CreateNtuple("Bremsstrahung", "Compton secondary effect eBrem");
  analysisManager->CreateNtupleDColumn(1, "BremDepEnergy");
  analysisManager->CreateNtupleDColumn(1, "BremGammaEnergy");
  analysisManager->CreateNtupleIColumn(1, "NumOfBremGamma");
  analysisManager->FinishNtuple(1);

  G4cout << "\n----> Output file is open in " << fileName << G4endl;
}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


void HistoManager::FillTuple(){
  //fill ntuple
  //
  G4AnalysisManager *analysisManager = G4AnalysisManager::Instance();

  if (fNumOfComptAtGe != 0){

    analysisManager->FillNtupleDColumn(0, 0, fComptEnergy);
    analysisManager->FillNtupleDColumn(0, 1, fAngle);
    analysisManager->FillNtupleIColumn(0, 2, fNumOfComptAtGe);
    analysisManager->FillNtupleDColumn(0, 3, fGammaFinalEnergy);
    analysisManager->AddNtupleRow(0);
  }

  if (fNumOfComptAtGe != 0 and fNumOfBremGamma != 0){
    //G4cout << "haha" << std::endl;
    analysisManager->FillNtupleDColumn(1, 0, fBremDepEnergy);
    analysisManager->FillNtupleDColumn(1, 1, fBremGammaEnergy);
    analysisManager->FillNtupleIColumn(1, 2, fNumOfBremGamma);
    analysisManager->AddNtupleRow(1);
  }
  return;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::Save()
{
  if (!fFactoryOn)
    return;
  auto analysisManager = G4AnalysisManager ::Instance();
  analysisManager->Write();
  analysisManager->CloseFile(); // and closing the tree (and the file)

  G4cout << "\n----> Histograms and ntuples are saved\n"
         << G4endl;
}
